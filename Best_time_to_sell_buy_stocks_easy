//optimized_own
// O(N) time.....O(1) Space

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int maxpro = 0;
        int minSo = prices[0];

        for(int i=0; i<prices.size(); i++){
            minSo = min(minSo, prices[i]);
            int profit = prices[i] - minSo;
            maxpro = max(maxpro, profit);
        }
        return maxpro;
    }
};

//neetcode(sol)_

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int maxP = 0, l = 0, r = 0;
        while (r < prices.size()){
            if (prices[r] > prices[l])
                maxP = max(maxP, prices[r] - prices[l]);
            else
                l = r;
            ++r;
        }
        return maxP;
    }
};
